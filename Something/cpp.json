{

	// Place your snippets for C++ here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Printf": {
		"prefix": "printf",
		"body":[
			"printf(\"$1\\n\", $2);"
		],
		"description": "HaHa"
	},
	"FastRead": {
		"prefix": "faster",
		"body": [
			"inline int read() {",
			"\tregister int x = 0, f = 1; char ch = getchar();",
			"\tfor (; !isdigit(ch); ch = getchar()) if (ch == '-') f = -f;",
			"\tfor (; isdigit(ch); ch = getchar()) x = x * 10 + (ch ^ 48);",
			"\treturn x * f;",
			"}"
		],
		"description": "fast_read into data"
	},
	"Fread_FastRead" : {
		"prefix": "ffaster",
		"body": [
			"char xB[1 << 15], *xS = xB, *xT = xB;",
			"# define getc (xS == xT && (xT = (xS = xB) + fread(xB, 1, 1 << 15, stdin), xS == xT) ? 0 : *xS++)",
			"inline int read() {",
			"\tregister int x = 0, f = 1; char ch = getc;",
			"\tfor (; !isdigit(ch); ch = getc) if (ch == '-') f = -f;",
			"\tfor (; isdigit(ch); ch = getc) x = x * 10 + (ch ^ 48);",
			"\treturn x * f;",
			"}"
		]
	},
	"Freopen": {
		"prefix": "freopen",
		"body": [
			"freopen(\"$1.in\",\"r\",stdin);",
			"freopen(\"$1.out\",\"w\",stdout);"
		],
	},
	"Fprintf": {
		"prefix": "fprintf",
		"body": [
			"fprintf(stderr, \"$1\\n\", $2);"
		],
	},
	"C++ head": {
		"prefix": "headfile", 
		"body": [
			"# include <set>",
			"# include <map>",
			"# include <time.h>",
			"# include <math.h>",
			"# include <stdio.h>",
			"# include <cstring>",
			"# include <stdlib.h>",
			"# include <iostream>",
			"# include <algorithm>",
		],
	}
}